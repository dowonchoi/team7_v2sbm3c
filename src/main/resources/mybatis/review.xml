<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="dev.mvc.review.ReviewDAOInter">

  <!--  파일 업데이트 등록 전
  <insert id="create" parameterType="dev.mvc.review.ReviewVO">
    INSERT INTO review (reviewno, productsno, memberno, content, summary, emotion, rdate)
    VALUES (review_seq.nextval, #{productsno}, #{memberno}, #{content}, #{summary}, #{emotion}, sysdate)
  </insert> -->
  
  <!-- 리뷰 등록 (이미지 3개 포함 버전) -->
  <insert id="create" parameterType="dev.mvc.review.ReviewVO">
    INSERT INTO review (
      reviewno, productsno, memberno, content, summary, emotion,
      file1, file1saved, size1, file2, file2saved, size2, file3, file3saved, size3, rdate
    ) VALUES (
      review_seq.nextval,
      #{productsno, jdbcType=INTEGER},
      #{memberno, jdbcType=INTEGER},
      #{content, jdbcType=VARCHAR},
      #{summary, jdbcType=VARCHAR},
      #{emotion, jdbcType=INTEGER},
      #{file1, jdbcType=VARCHAR},
      #{file1saved, jdbcType=VARCHAR},
      #{size1, jdbcType=INTEGER},
      #{file2, jdbcType=VARCHAR},
      #{file2saved, jdbcType=VARCHAR},
      #{size2, jdbcType=INTEGER},
      #{file3, jdbcType=VARCHAR},
      #{file3saved, jdbcType=VARCHAR},
      #{size3, jdbcType=INTEGER},
      sysdate
    )
  </insert>



  <!--  리뷰 목록
  <select id="list_by_productsno" resultType="dev.mvc.review.ReviewVO">
    SELECT 
      r.reviewno, r.productsno, r.memberno, r.content, r.summary, r.emotion, TO_CHAR(r.rdate, 'YYYY-MM-DD') AS rdate, m.mname
    FROM review r
    JOIN member m ON r.memberno = m.memberno
    WHERE r.productsno = #{productsno}
    ORDER BY r.reviewno DESC
  </select> -->
  <select id="list_by_productsno" resultType="dev.mvc.review.ReviewVO">
    SELECT 
      r.reviewno,
      r.productsno,
      r.memberno,
      r.content,
      r.summary,
      r.emotion,
      TO_CHAR(r.rdate, 'YYYY-MM-DD') AS rdate,
      r.file1, r.file1saved, r.size1,
      r.file2, r.file2saved, r.size2,
      r.file3, r.file3saved, r.size3,
      m.mname
    FROM review r
    JOIN member m ON r.memberno = m.memberno
    WHERE r.productsno = #{productsno}
    ORDER BY r.reviewno DESC
  </select>


  <!-- 리뷰 목록 + 회원 이름 + 이미지 3개 정보 포함 -->
  <select id="list_join_by_productsno" resultType="dev.mvc.review.ReviewMemberVO">
      SELECT 
          R.reviewno,
          R.productsno,
          R.memberno,
          R.content,
          R.summary,
          R.emotion,
          R.rdate,
          R.file1, R.file1saved, R.size1,
          R.file2, R.file2saved, R.size2,
          R.file3, R.file3saved, R.size3,
          M.mname
      FROM review R
      JOIN member M ON R.memberno = M.memberno
      WHERE R.productsno = #{productsno}
      ORDER BY R.reviewno DESC
  </select>


  <!--
  <select id="read" resultType="dev.mvc.review.ReviewVO" parameterType="int">
    SELECT reviewno, memberno, productsno, content, emotion, summary, rdate
    FROM review
    WHERE reviewno = #{reviewno}
  </select> -->
  
  <select id="read" resultType="dev.mvc.review.ReviewVO" parameterType="int">
    SELECT 
      reviewno,
      productsno,
      memberno,
      content,
      summary,
      emotion,
      file1, file1saved, size1,
      file2, file2saved, size2,
      file3, file3saved, size3,
      rdate
    FROM review
    WHERE reviewno = #{reviewno}
  </select>

  
  <!-- 리뷰 수정 -->
  <update id="update" parameterType="dev.mvc.review.ReviewVO">
    UPDATE review
    SET content = #{content},
        emotion = #{emotion},
        summary = #{summary}
    WHERE reviewno = #{reviewno}
  </update>
  
  <!-- 리뷰 삭제 (선택) -->
  <delete id="delete" parameterType="int">
    DELETE FROM review WHERE reviewno = #{reviewno}
  </delete>
  
  <!-- 
  <select id="read_with_member" resultType="dev.mvc.review.ReviewMemberVO">
    SELECT R.reviewno, R.productsno, R.memberno, R.content,
           R.emotion, R.summary, R.rdate,
           M.mname, M.id
    FROM review R
    JOIN member M ON R.memberno = M.memberno
    WHERE R.reviewno = #{reviewno}
  </select>-->
  
  <select id="read_with_member" resultType="dev.mvc.review.ReviewMemberVO">
    SELECT 
      R.reviewno, R.productsno, R.memberno, R.content,
      R.emotion, R.summary, R.rdate,
      R.file1, R.file1saved, R.size1,
      R.file2, R.file2saved, R.size2,
      R.file3, R.file3saved, R.size3,
      M.mname, M.id
    FROM review R
    JOIN member M ON R.memberno = M.memberno
    WHERE R.reviewno = #{reviewno}
  </select>


  <select id="countPurchasedByMember" resultType="int">
    SELECT COUNT(*) 
    FROM order_item oi
    JOIN orders o ON oi.orderno = o.orderno
    WHERE o.memberno = #{memberno}
      AND oi.productsno = #{productsno}
      AND o.order_state IN ('결제완료', '배송완료')  <!-- 필요에 따라 상태 추가 -->
  </select>
  
  <!-- 리뷰 이미지 전용 수정 (update_file) -->
  <update id="update_file" parameterType="dev.mvc.review.ReviewVO">
    UPDATE review
    SET file1=#{file1, jdbcType=VARCHAR},
        file1saved=#{file1saved, jdbcType=VARCHAR},
        size1=#{size1, jdbcType=INTEGER},
        file2=#{file2, jdbcType=VARCHAR},
        file2saved=#{file2saved, jdbcType=VARCHAR},
        size2=#{size2, jdbcType=INTEGER},
        file3=#{file3, jdbcType=VARCHAR},
        file3saved=#{file3saved, jdbcType=VARCHAR},
        size3=#{size3, jdbcType=INTEGER}
    WHERE reviewno=#{reviewno, jdbcType=INTEGER}
  </update>


  <!-- 리뷰 목록 (페이징, 3개씩 가져오기) -->
  <select id="list_join_by_productsno_paging" resultType="dev.mvc.review.ReviewMemberVO">
    SELECT * FROM (
      SELECT ROWNUM AS rnum, R.* FROM (
        SELECT 
          rv.reviewno,
          rv.productsno,
          rv.memberno,
          rv.content,
          rv.summary,
          rv.emotion,
          TO_CHAR(rv.rdate, 'YYYY-MM-DD') AS rdate,
          rv.file1, rv.file1saved, rv.size1,
          rv.file2, rv.file2saved, rv.size2,
          rv.file3, rv.file3saved, rv.size3,
          m.mname
        FROM review rv
        JOIN member m ON rv.memberno = m.memberno
        WHERE rv.productsno = #{productsno}
        ORDER BY rv.reviewno DESC
      ) R
    )
    WHERE rnum BETWEEN #{start} AND #{end}
  </select>

  <select id="list_more" resultType="dev.mvc.review.ReviewMemberVO" parameterType="map">
      SELECT 
          R.reviewno, R.productsno, R.memberno, R.content, R.summary, R.emotion, R.rdate,
          R.file1, R.file1saved, R.size1,
          R.file2, R.file2saved, R.size2,
          R.file3, R.file3saved, R.size3,
          M.mname
      FROM review R
      JOIN member M ON R.memberno = M.memberno
      WHERE R.productsno = #{productsno}
      ORDER BY R.reviewno DESC
      OFFSET #{offset} ROWS FETCH NEXT #{limit} ROWS ONLY
  </select>





</mapper>
